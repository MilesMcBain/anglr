% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rangl-lines.r, R/rangl-points.r, R/rangl-polygons.r, R/rangl-raster.r, R/rangl-trip.r, R/rgl.r
\name{rangl}
\alias{rangl}
\alias{rangl.RasterLayer}
\alias{rangl.SpatialLines}
\alias{rangl.SpatialMultiPoints}
\alias{rangl.SpatialPoints}
\alias{rangl.SpatialPolygons}
\alias{rangl.mesh3d}
\alias{rangl.trip}
\title{Generate primitive-based spatial structures}
\usage{
rangl(x, ...)

\method{rangl}{SpatialLines}(x, ...)

\method{rangl}{SpatialMultiPoints}(x, ...)

\method{rangl}{SpatialPoints}(x, ...)

\method{rangl}{SpatialPolygons}(x, max_area = NULL, ...)

\method{rangl}{RasterLayer}(x, z = x, na.rm = FALSE, ...)

\method{rangl}{trip}(x, ...)

\method{rangl}{mesh3d}(x, ...)
}
\arguments{
\item{x}{input data}

\item{...}{arguments passed to methods}

\item{max_area}{maximum area in coordinate system of x, passed to \code{\link[RTriangle]{triangulate}} 'a' argument}

\item{z}{\code{\link[raster]{raster}}, by default \code{x} is used}

\item{na.rm}{remove missing values}
}
\value{
a list of tibble data frames, using the gris-map_table model

quad_mesh
}
\description{
Create primitive-based "mesh" structures from various inputs.

Colours not supported, this just gives the viridis palette sequentially.
}
\details{
#' Methods exist for SpatialPolygons, SpatialLines, rgl mesh3d(triangle) ...
}
\examples{
## -----------------------------------------------
## POLYGONS
library(maptools)
data(wrld_simpl)
b <- rangl(wrld_simpl)
plot(b)
if (require(rworldxtra)) {

#data(countriesHigh)
#sv <- c("New Zealand", "Antarctica", "Papua New Guinea",
#  "Indonesia", "Malaysia", "Fiji", "Australia")
#a <- subset(countriesHigh, SOVEREIGNT \%in\% sv)
#b7 <- rangl(a, max_area = 0.5)
#plot(globe(b7))
#}
## -----------------------------------------------
## LINES
#l1 <- rangl(as(a, "SpatialLinesDataFrame") )
#plot(l1)
#plot(globe(l1))
library(raster)
w <- raster(volcano)
plot(rangl(w/300))

## -----------------------------------------------
## RGL TRIANGLES
library(rgl)

dod <- rangl(dodecahedron3d(col = "cyan"))
octo <- rangl(translate3d(octahedron3d(col = "blue"), 6, 0, 0))
plot(dod, col = viridis::viridis(5)[1], alpha = 0.3)
plot(octo, col = viridis::viridis(5)[5], alpha = 0.3)
bg3d("grey")
}

